from os.path import join
import waflib.extras.protobuf

container_proto_files=[
	'container_msg.proto']

ringbuf_proto_files=[
	'ringbuf_msg.proto']

def build(buildCtx):
    containerCcNodeList=[]
    containerProtoTaskList=[]
    for proto in container_proto_files:
	compileTask='protoc_%s' % proto
	protoNode=buildCtx.path.find_node(proto)
	ccNode=protoNode.change_ext('.pb.cc')
	hNode=protoNode.change_ext('.pb.h')
	waflib.extras.protobuf.define_task_gen(buildCtx,
		name=compileTask,
		source=[protoNode],
		target=[ccNode, hNode],
		includes=['.'])
	containerCcNodeList.append(ccNode)
	containerProtoTaskList.append(compileTask)
    buildCtx.stlib(
	    name='stlib_container_msg',
	    source=containerCcNodeList + [buildCtx.path.find_node('container_msg.cxx')],
	    target='container_msg',
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    libpath=buildCtx.env.component.lib_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    install_path=buildCtx.env.component.install_tree.test,
	    after=['shlib_simgrid_core', 'shlib_simgrid_grid_db'] + containerProtoTaskList)
    buildCtx.program(
	    name='program_mmap_container_service',
	    source=containerCcNodeList + [buildCtx.path.find_node('mmap_container_service.cxx')],
	    target=join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'mmap_container_service'),
	    defines=['GTEST_HAS_PTHREAD=1', 'BOOST_CB_DISABLE_DEBUG=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS + ['-DBOOST_CB_DISABLE_DEBUG'],
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['BOOST', 'PROTOBUF', 'ZEROMQ', 'shlib_simgrid_core', 'shlib_simgrid_grid_db', 'stlib_container_msg'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=buildCtx.env.component.install_tree.test,
	    after=['shlib_simgrid_core', 'shlib_simgrid_grid_db'])
    buildCtx.program(
	    name='program_mmap_container_test',
	    source='mmap_container_test.cxx',
	    target=join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'mmap_container_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS + ['-DBOOST_CB_DISABLE_DEBUG'],
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['BOOST', 'PROTOBUF', 'GTEST', 'ZEROMQ', 'shlib_simgrid_core', 'shlib_simgrid_grid_db', 'stlib_container_msg'],
	    libpath=buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=buildCtx.env.component.install_tree.test,
	    after=['shlib_simgrid_core', 'shlib_simgrid_grid_db'])
    ringbufCcNodeList=[]
    ringbufProtoTaskList=[]
    for proto in ringbuf_proto_files:
	compileTask='protoc_%s' % proto
	protoNode=buildCtx.path.find_node(proto)
	ccNode=protoNode.change_ext('.pb.cc')
	hNode=protoNode.change_ext('.pb.h')
	waflib.extras.protobuf.define_task_gen(buildCtx,
		name=compileTask,
		source=[protoNode],
		target=[ccNode, hNode],
		includes=['.'])
	ringbufCcNodeList.append(ccNode)
	ringbufProtoTaskList.append(compileTask)
    buildCtx.stlib(
	    name='stlib_ringbuf_msg',
	    source=ringbufCcNodeList + [buildCtx.path.find_node('ringbuf_msg.cxx')],
	    target='ringbuf_msg',
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    libpath=buildCtx.env.component.lib_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    install_path=buildCtx.env.component.install_tree.test,
	    after=['shlib_simgrid_core', 'shlib_simgrid_grid_db'] + ringbufProtoTaskList)
    buildCtx.program(
	    name='program_multi_reader_ring_buffer_service',
	    source=ringbufCcNodeList + [buildCtx.path.find_node('multi_reader_ring_buffer_service.cxx')],
	    target=join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'multi_reader_ring_buffer_service'),
	    defines=['GTEST_HAS_PTHREAD=1', 'BOOST_CB_DISABLE_DEBUG=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS + ['-DBOOST_CB_DISABLE_DEBUG'],
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['BOOST', 'PROTOBUF', 'ZEROMQ', 'shlib_simgrid_core', 'shlib_simgrid_grid_db', 'stlib_ringbuf_msg'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=buildCtx.env.component.install_tree.test,
	    after=['shlib_simgrid_core', 'shlib_simgrid_grid_db'])
    buildCtx.program(
	    name='program_multi_reader_ring_buffer_test',
	    source='multi_reader_ring_buffer_test.cxx',
	    target=join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'multi_reader_ring_buffer_test'),
	    defines=['GTEST_HAS_PTHREAD=1', 'BOOST_CB_DISABLE_DEBUG=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS + ['-DBOOST_CB_DISABLE_DEBUG'],
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['BOOST', 'PROTOBUF', 'GTEST', 'ZEROMQ', 'shlib_simgrid_core', 'shlib_simgrid_grid_db', 'stlib_ringbuf_msg'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=buildCtx.env.component.install_tree.test,
	    after=['shlib_simgrid_core', 'shlib_simgrid_grid_db'])

def install(installCtx):
    return
