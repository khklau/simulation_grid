from os.path import join
import waflib.extras.protobuf

proto_files=[
	'header.proto']

def build(buildCtx):
    relativeIncludePath = buildCtx.env.component.build_tree.includeNode(buildCtx).path_from(buildCtx.path.get_bld())
    ccNodeList=[]
    protoTaskList=[]
    for proto in proto_files:
	compileTask='protoc_%s' % proto
	protoNode=buildCtx.path.find_node(proto)
	ccNode=protoNode.change_ext('.pb.cc')
	hNode=protoNode.change_ext('.pb.h')
	waflib.extras.protobuf.define_task_gen(buildCtx,
		name=compileTask,
		source=[protoNode],
		target=[ccNode, hNode],
		includes=['.'])
	ccNodeList.append(ccNode)
	protoTaskList.append(compileTask)
	publishTask='cp_%s' % proto
	buildCtx(
		name=publishTask,
		rule='cp ${SRC} ${TGT}',
		source=hNode,
		target=join(relativeIncludePath, str(hNode)),
		after=compileTask)
	protoTaskList.append(publishTask)
    buildCtx.shlib(
	    source=ccNodeList + [buildCtx.path.find_node('handle.cxx')],
	    target='grid_db',
	    includes=buildCtx.env.component.include_path_list,
	    libpath=buildCtx.env.component.lib_path_list,
	    cxxflags=['-Wl,-z,origin'],
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=buildCtx.env.component.install_tree.lib,
	    after=protoTaskList)

def install(installCtx):
    return
