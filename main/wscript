from waflib.extras.layout import Solution, Product

NAME = 'supernova'

def options(optCtx):
    optCtx.load('compiler_cxx cxx boost protobuf gtest gmock zeromq')

def configure(confCtx):
    confCtx.load('compiler_cxx cxx boost protobuf gtest gmock zeromq')
    confCtx.check_boost('system exception program_options filesystem date_time chrono thread random context coroutine')
    confCtx.env.product = Product.fromContext(confCtx, NAME, confCtx.env.solution)
    confCtx.env.solution.addProduct(confCtx.env.product)
    confCtx.env.product.include_path_list.append(confCtx.env['INCLUDES_BOOST'])
    confCtx.env.product.include_path_list.append(confCtx.env['INCLUDES_PROTOBUF'])
    confCtx.env.product.include_path_list.append(confCtx.env['INCLUDES_GTEST'])
    confCtx.env.product.include_path_list.append(confCtx.env['INCLUDES_GMOCK'])
    confCtx.env.product.include_path_list.append(confCtx.env['INCLUDES_ZEROMQ'])
    confCtx.env.product.lib_path_list.extend(confCtx.env['LIBPATH_BOOST'])
    confCtx.env.product.lib_path_list.append(confCtx.env['LIBPATH_PROTOBUF'])
    confCtx.env.product.lib_path_list.append(confCtx.env['STLIBPATH_GTEST'])
    confCtx.env.product.lib_path_list.append(confCtx.env['STLIBPATH_GMOCK'])
    confCtx.env.product.lib_path_list.append(confCtx.env['LIBPATH_ZEROMQ'])
    confCtx.env.product.rpath_list.extend(confCtx.env['LIBPATH_BOOST'])
    confCtx.env.product.rpath_list.append(confCtx.env['LIBPATH_PROTOBUF'])
    confCtx.env.product.rpath_list.append(confCtx.env['LIBPATH_ZEROMQ'])
    confCtx.recurse('core')
    confCtx.recurse('communication')
    confCtx.recurse('storage')

def build(buildCtx):
    buildCtx.env.product = buildCtx.env.solution.getProduct(NAME)
    buildCtx.recurse('core')
    buildCtx.recurse('communication')
    buildCtx.recurse('storage')

def install(installCtx):
    installCtx.env.product = installCtx.env.solution.getProduct(NAME)
    installCtx.recurse('core')
    installCtx.recurse('communication')
    installCtx.recurse('storage')
